const features = [{ title: "Call Center", description: "Giải pháp nền tảng tổng đài chuyên nghiệp với đầy đủ tính năng thiết yếu để vận hành trung tâm chăm sóc khách hàng và Telesales, hỗ trợ các kênh liên lạc truyền thống như hotline và email.", price: "500.000 VND", price_tag: "/ user/ tháng", buy_btn_link: "/", buy_btn_text: "Mua ngay", key_feature: "Key feature", keys: [{ title: "Tích hợp kênh thoại và email", description: "Các ticket được tạo từ các nguồn sẽ được tự động chia việc cho nhân viên. Các agent, phòng ban có thể luân chuyển ticket cho nhau để cùng xử lý 1 công việc.Báo cáo chi tiết ticket: thời gian phản hồi lần đầu, thời gian xử lý trung bình, báo cáo chi tiết theo nội dung", imgUrl: "assets/imgs/gg-logo.png" }, { title: "Quản lý thông tin khách hàng - customer 360°", description: "Nothing" }, { title: "Quản lý phiếu ghi", description: "Nothing" }, { title: "Khảo sát khách hàng", description: "Nothing" }, { title: "Quản lý chiến dịch (Campaign)", description: "Nothing" }, { title: "Tự động hóa quy trình (Workflow)", description: "Nothing" }, { title: "Cơ sở tri thức", description: "Nothing" }, { title: "Tính năng dashboard và báo cáo", description: "Nothing" }, { title: "Ứng dụng mobile", description: "Nothing" }], marked: !1 }, { title: "OMNI-Channel CRM", description: "Giải pháp tích hợp toàn diện các kênh liên lạc và công cụ quản lý, thực thi, giám sát, tự động hóa và tối ưu hoạt động marketing, bán hàng và chăm sóc khách hàng trên cùng một nền tảng thống nhất.", price: "1.000.000 VNĐ", price_tag: "/ user/ tháng", buy_btn_link: "/", buy_btn_text: "Mua ngay", key_feature: "Key feature", keys: [{ title: "Tích hợp các kênh tương tác với khách hàng (customer engagement)", description: "Các ticket được tạo từ các nguồn sẽ được tự động chia việc cho nhân viên. Các agent, phòng ban có thể luân chuyển ticket cho nhau để cùng xử lý 1 công việc.Báo cáo chi tiết ticket: thời gian phản hồi lần đầu, thời gian xử lý trung bình, báo cáo chi tiết theo nội dung", imgUrl: "assets/imgs/gg-logo.png" }, { title: "Quản lý thông tin khách hàng - customer 360°", description: "Nothing" }, { title: "Quản lý phiếu ghi", description: "Nothing" }, { title: "Quản lý khách hàng tiềm năng (Lead management)", description: "Nothing" }, { title: "Phễu bán hàng", description: "Nothing" }, { title: "Đo lường và tối ưu hiệu quả quảng cáo", description: "Nothing" }, { title: "Khảo sát khách hàng", description: "Nothing" }, { title: "Bán hàng qua Facebook (Meta commerce)", description: "Nothing", tag: "Mới" }, { title: "Quản lý chiến dịch (Campaign)", description: "Nothing", tag: "Mới" }, { title: "Tự động hóa quy trình (Workflow)", description: "Nothing" }, { title: "Tính năng dashboard và báo cáo", description: "Nothing", tag: "Mới" }, { title: "Ứng dụng mobile", description: "Nothing" }], marked: !0 }, { title: "OMNI-Channel Contact Center", description: "Giải pháp đa kênh tối ưu cho doanh nghiệp xây dựng trung tâm chăm sóc khách hàng chuyên nghiệp, tập trung vào tiếp nhận, phản hồi tự động, phân phối, giám sát và phân tích tương tác để nâng cao trải nghiệm và hiệu quả vận hành.", price: "800.000 VNĐ", price_tag: "/ user/ tháng", buy_btn_link: "/", buy_btn_text: "Mua ngay", key_feature: "Key feature", keys: [{ title: "Tích hợp các kênh tương tác với khách hàng (customer engagement)", description: "Các ticket được tạo từ các nguồn sẽ được tự động chia việc cho nhân viên. Các agent, phòng ban có thể luân chuyển ticket cho nhau để cùng xử lý 1 công việc.Báo cáo chi tiết ticket: thời gian phản hồi lần đầu, thời gian xử lý trung bình, báo cáo chi tiết theo nội dung", imgUrl: "assets/imgs/gg-logo.png" }, { title: "Quản lý thông tin khách hàng - customer 360°", description: "Nothing" }, { title: "Quản lý phiếu ghi", description: "Nothing" }, { title: "Khảo sát khách hàng", description: "Nothing" }, { title: "Quản lý chiến dịch (Campaign)", description: "Nothing" }, { title: "Tự động hóa quy trình (Workflow)", description: "Nothing" }, { title: "Cơ sở tri thức", description: "Nothing" }, { title: "Tính năng dashboard và báo cáo", description: "Nothing" }, { title: "Ứng dụng mobile", description: "Nothing" }], marked: !1 }], add_ons = [{ isNew: "Add-on", name: "Chat bot", price: "10.000.000/ 1 lần triển khai", description: "Tự động tiếp nhận và phản hồi khách hàng 24x7 trên các kênh chat (Facebook, Istagram, Zalo, Livechat), tối ưu nguồn lực và nâng cao trải nghiệm khách hàng.", features: [{ title: "Tích hợp với tất cả kênh chat", description: "Nothing", imgUrl: !1 }, { title: "Xây dựng kịch bản hội thoại (Flow Builder)", description: "Nothing", imgUrl: !1 }, { title: "Nhận diện nội dung và phản hồi", description: "Nothing", imgUrl: !1 }, { title: "Thu thập và phân loại thông tin", description: "Nothing", imgUrl: !1 }, { title: "Chuyển tiếp đến chuyên viên", description: "Nothing", imgUrl: !1 }, { title: "Cho phép tích hợp AI", description: "Nothing", imgUrl: !1 }], bottomText: "Dùng chat bot ngay", btnText: "Liên hệ chuyên viên" }, { isNew: "Add-on", name: "AI", price: "Liên hệ với chúng tôi để triển khai", description: "Ứng dụng AI ở tất cả các giai đoạn, từ phản hồi khách hàng tự động, hỗ trợ chuyên viên đến đánh giá mức độ tiềm năng của khách hàng, đánh giá chất lượng dịch vụ chuyên viên và nhiều ứng dụng khác", features: [{ title: "AI chatbot - Tự động phản hồi khách hàng", description: "Nothing", imgUrl: !1 }, { title: "AI assisstant - Hỗ trợ chuyên viên", description: "Nothing", imgUrl: !1 }, { title: "AI Knowledge base - Kho tri thức", description: "Nothing", imgUrl: !1 }, { title: "AI Lead scoreing - Đánh giá lead tiềm năng", description: "Nothing", imgUrl: !1 }], bottomText: "Tích hợp AI ngay", btnText: "Liên hệ chuyên viên" }]; const featuresArea = document.getElementById("features"); function featureDesktopLayout() {
    featuresArea.innerHTML = ""; const e = document.createElement("div"); e.className = "content-flex card", featuresArea.appendChild(e), features.forEach(t => {
        const n = document.createElement("div"); n.className = "feature-col", n.innerHTML = `
        ${t.marked ? '<span class="marker" ><span class="marker-text">Khuyên dùng</span></span >' : ""}
            <div class="col-wrapper">
                <div class="col-content">
                    <div class='col-flex-stretch'>
                        <h4 class="col-title">${t.title}</h4>
                        <p class="col-sub-title">${t.description}</p>
                        <div>
                            <p class="price"><span>${t.price}</span></p>
                            <p class="price-tag col-sub-title">${t.price_tag}</p>
                        </div>
                    </div>
                    <div class="btns-wrapper">
                        <button class="primary-btn openForm">
                            <span class="btn-text-bg">
                                <span class="btn-span">
                                    <span class="i-text">${t.buy_btn_text}</span>
                                    <span class="af-text">${t.buy_btn_text}</span>
                                </span>
                            </span>
                        </button>
                        <a href="#table-plans" class="click-link col-feature">
                            <span class="click-link-text features">Tìm hiểu thêm</span>
                            <span class="icon">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16"
                                    fill="currentColor" viewBox="0 0 16 16" style="padding-left:6px">
                                    <path fill="currentColor" fill-rule="evenodd"
                                        d="M11.948 8.85H1v-1.7h10.948L9.399 4.6l1.202-1.202L15.202 8l-4.601 4.602-1.202-1.203z"
                                        clip-rule="evenodd"></path>
                                </svg>
                            </span>
                        </a>
                    </div>
                </div>
                <ul class="feature-li">
                    ${t.keys.map(e => `
                        <li class="li-features">
                            <div class="li-initial-icon">
                                <svg xmlns="http://www.w3.org/2000/svg" width="21" height="16" viewBox="0 0 21 16" fill="currentColor">
                                    <path d="M21.053 1.758 19.295 0 6.771 12.52 1.764 7.513 0 9.277 6.771 16z"></path>
                                </svg>
                            </div>
                            <div class="li-content">
                                <div class="li-a">
                                    <span class="li-text">${e.title}</span>
                                    ${e.tag ? `<span class="tag"><span class="tag-text">${e.tag}</span></span>` : ""}
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16" fill="currentColor" class="search-icon-li">
                                        <path d="m0 14.098 1.509 1.509 3.771-3.772-1.508-1.508zM9.741 0a5.867 5.867 0 1 0 0 11.735A5.867 5.867 0 0 0 9.742 0m0 1.067c2.647 0 4.8 2.154 4.8 4.8s-2.153 4.8-4.8 4.8-4.8-2.154-4.8-4.8 2.153-4.8 4.8-4.8"></path>
                                    </svg>
                                </div>
                            </div>
                        </li>
                    `).join("")}
                </ul>
            </div>
        `, e.appendChild(n)
    }); const t = e.querySelectorAll(".col-sub-title"); let n = 0; t.forEach(e => { const t = e.offsetHeight; t > n && (n = t) }), t.forEach(e => { e.classList.contains("price-tag") || (e.style.minHeight = `${n}px`) })
} function featureMobileLayout() { featuresArea.innerHTML = '\n        <div class="feature-wrapper">\n            <div class="feature-p-wrapper">\n                <div class="feature-m-content">\n                </div>\n            </div>\n        </div>\n        '; document.querySelector(".feature-m-content").innerHTML = '\n        <div class="slick-list">\n            <div class="slick-track">\n                <div class="slick-slide">\n                    <div class="feature-m-col">\n                        <div class="feature-m-col-wrapper">\n                            <div class="feature-m-col-content">\n                                <div class="feature-m-col-flex-stretch">\n                                    <h4 class="feature-m-col-title">' + features[0].title + '</h4>\n                                    <p class="feature-m-col-sub-title">' + features[0].description + '</p>\n                                    <div>\n                                        <p class="feature-m-price"><span>' + features[0].price + '</span></p>\n                                        <p class="feature-m-price-tag feature-m-col-sub-title">' + features[0].price_tag + '</p>\n                                    </div>\n                                </div>\n                                <div class="feature-m-btns-wrapper">\n                                    <button class="primary-btn openForm">\n                                        <span class="btn-text-bg">\n                                            <span class="btn-span">\n                                                <span class="i-text">' + features[0].buy_btn_text + '</span>\n                                                <span class="af-text">' + features[0].buy_btn_text + '</span>\n                                            </span>\n                                        </span>\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class="feature-m-nav">\n            <button class="small-nav-btn choosen"></button>\n            <button class="small-nav-btn"></button>\n            <button class="small-nav-btn"></button>\n        </div>\n        <nav class="feature-m-nav-btn">\n            <button class="nav-btn" id="left-nav">\n                <div class="nav-btn-icon">\n                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n                        <path fill="currentColor"\n                            d="M5.052 12.85 8.601 16.4l-1.202 1.202L2.798 12l4.601-4.602 1.202 1.202-3.549 3.549H21v1.7z">\n                        </path>\n                    </svg>\n                </div>\n            </button>\n            <button class="nav-btn" id="right-nav">\n                <div class="nav-btn-icon">\n                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n                        <path fill="currentColor"\n                            d="M18.948 11.15 15.399 7.6l1.202-1.202L22.202 12l-5.601 5.6-1.202-1.202 3.549-3.549H3v-1.7z">\n                        </path>\n                    </svg>\n                </div>\n            </button>\n        </nav>\n        <div class="feature-m-li"></div>\n        ' } const mainTable = document.getElementById("main"), tableHead = document.createElement("thead"); tableHead.classList.add("table-header"); const headRow = document.createElement("tr"); headRow.classList.add("header-row"); const mainBody = document.getElementById("mainBody"); function laptopTable() { mainBody.innerHTML = "", headRow.innerHTML = "", tableHead.classList.remove("mobile"), mainTableRows.forEach(e => { const t = document.createElement("th"); t.innerHTML = `<p key=${e.id} class="head-text">${e.title}</p>`, headRow.appendChild(t) }), tableHead.appendChild(headRow), mainTable.insertBefore(tableHead, mainTable.firstChild); const e = plans.filter(e => null === e.title), t = document.createElement("tr"); t.classList.add("main-tr", "no-ex"), t.innerHTML = ' \n    <td class="no-ex-td">\n        <table class="compare-table">\n            <tbody class="main-body"></tbody>\n        </table>\n    </td>'; const n = t.querySelector("tbody"); e.forEach(e => { n.innerHTML = "", e.rows.forEach(e => { const t = e.map(e => `\n            <td class="main-td">\n                <p class="normal-text">${e}</p>\n            </td>\n        `).join(""), a = document.createElement("tr"); a.classList.add("sub-tr"), a.innerHTML = t, n.appendChild(a) }) }), mainBody.appendChild(t) } const faqSection = document.querySelector(".ques-section"); questions.forEach((e, t) => { const n = document.createElement("div"); n.classList.add("ques-sec-wrapper"), n.innerHTML = `\n            <h3 class="small-title">${e.topic}</h3>\n            <div class="ques-li-wrapper">\n                ${e.questions.map(e => `\n                    <div class="ques-li">\n                        <div class="ques-heading">\n                            <button class="open-table-btn">\n                                <h3 class="open-text">${e.ques}</h3>\n                            </button>\n                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"\n                                fill="currentColor" viewBox="0 0 24 24">\n                                <path fill="currentColor" fill-rule="evenodd"\n                                    d="m19.352 9.218-7.366 7.366-7.338-7.338L5.85 8.044l6.136 6.136 6.164-6.164z"\n                                    clip-rule="evenodd"></path>\n                            </svg>\n                        </div>\n                        <div class="ques-content">\n                            <div class="q-content-wrapper">\n                                <p class="normal-text">${e.ans}</p>\n                            </div>\n                        </div>\n                    </div>\n                `).join("")}\n            </div>\n        `, faqSection.appendChild(n) }); const carousel = document.querySelector(".logo-gallery-wrapper"), gallery = document.getElementById("logo-slider"), prevBtn = document.getElementById("gallery-prev"), nextBtn = document.getElementById("gallery-next"), imgSrcList = generateImgSrc(48), imgQueue = []; let singleImgWidth = 150; const startIdx = 10; let currentIndex = startIdx, offset = 0, clickTimeOut = 500; function generateImgSrc(e) { const t = []; for (let n = 1; n <= e; n++)t.push(`img/logos/logo (${n}).png`); return t } function initialQueue() { const e = imgSrcList.slice(0, startIdx); imgQueue.push(...e), generateFristLoad() } function generateFristLoad() { gallery.innerHTML = "", console.log("Length:", imgQueue.length), imgQueue.forEach(e => { const t = document.createElement("img"); t.src = e, t.alt = e, t.style.width = singleImgWidth + "px", gallery.appendChild(t) }) } let carouselInterval = null; function startCarousel() { carouselInterval || (carouselInterval = setInterval(() => { gallery.style.animation = "scroll 1s ease 1", gallery.addEventListener("animationend", () => { gallery.style.animation = "none", imgQueue.shift(), imgQueue.push(imgSrcList[currentIndex % imgSrcList.length]), currentIndex++ }) }, 3e3)) } function displayForm() { document.querySelectorAll(".openForm").forEach(e => { e.onclick = () => { toggleOverlay(); const t = overlay.querySelector(".form-wrapper"); t && "flex" !== t.style.display && (t.style.display = "flex") } }) } const form = document.getElementById("contact-form"), submitModal = document.querySelector(".form-submited-wrapper"), formElements = form.querySelectorAll("input, textarea, select"); function validateInput(e) { if ("false" !== e.dataset.req) { const t = e.dataset.regex, n = new RegExp(t), a = e.parentElement.querySelector(".warn-text"); 0 === e.value.length ? (e.dataset.inputStage = "blank", a && (a.textContent = e.dataset.blankMess)) : n.test(e.value) || "none" === t ? (e.dataset.inputStage = "normal", a && (a.textContent = "")) : (e.dataset.inputStage = "cons", a && (a.textContent = e.dataset.consMess)) } } formElements.forEach(e => { e.addEventListener("blur", () => { "true" === e.dataset.initial && (e.dataset.initial = "false"), validateInput(e) }), e.addEventListener("input", () => { "true" !== e.dataset.initial && validateInput(e) }) }); let lastMode = window.innerWidth < 768 ? "mobile" : "desktop"; function applyResponsiveLayout(e) { "mobile" === e ? (featureMobileLayout(), mobileTable()) : (featureDesktopLayout(), laptopTable(), highlightMainHeader(2), highlightPopularColumn(3)), displayForm() } window.addEventListener("load", () => { applyResponsiveLayout(lastMode) }), window.addEventListener("resize", () => { const e = window.innerWidth, t = e < 768 ? "mobile" : "desktop"; t !== lastMode && (lastMode = t, applyResponsiveLayout(t)) }); const overlay = document.querySelector(".overlay"); function toggleOverlay() { overlay.classList.toggle("open"), overlay.classList.contains("open") ? document.body.classList.add("no-scroll") : (Array.from(overlay.children).forEach(e => { e.style.display = "none" }), document.body.classList.remove("no-scroll")) } function highlightPopularColumn(e) { const t = Array.from(document.querySelectorAll("table.compare-table")).filter(e => "main" !== e.id), n = t[t.length - 1]; t.forEach(t => { const a = t.querySelectorAll("tbody tr"); a.forEach((l, o) => { const r = l.children; r[e] && (r[e].classList.add("popular"), t === n && o === a.length - 1 && r[e].classList.add("popular-bottom")) }) }) } function highlightMainHeader(e) { const t = document.querySelector("table.compare-table#main"); if (!t) return; const n = t.querySelector("thead tr"); if (!n) return; const a = n.children[e]; if (!a) return; a.classList.add("popular"); const l = document.createElement("span"); l.className = "marker"; const o = document.createElement("span"); o.className = "marker-text", o.textContent = "Khuyên dùng", l.appendChild(o), a.appendChild(l) } function toggleTable() { document.querySelectorAll(".tr-header").forEach(e => { e.addEventListener("click", () => { const t = e.closest(".td-open-content"); t && t.classList.toggle("open") }) }) } overlay.addEventListener("click", e => { e.target === overlay && toggleOverlay() }); const faqToggles = document.querySelectorAll(".ques-heading"); faqToggles.forEach(e => { e.addEventListener("click", () => { const t = e.closest(".ques-li"); t && t.classList.toggle("open") }) }); const toggleBtn = document.querySelector(".m-nav-toggle-menu"), menu = document.getElementById("menu"); toggleBtn.addEventListener("click", () => { menu.classList.toggle("open") }), document.addEventListener("click", e => { menu.classList.contains("open") && !menu.contains(e.target) && !toggleBtn.contains(e.target) && menu.classList.remove("open") });